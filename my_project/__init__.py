"""
2022
apavelchak@gmail.com
Â© Andrii Pavelchak
"""

import os
import re
from datetime import datetime, timedelta
from http import HTTPStatus
import secrets
import jwt
from typing import Dict, Any
from functools import wraps
from urllib.parse import quote_plus

from dotenv import load_dotenv
from flasgger import Swagger
from flask import Flask, jsonify, request, g
from flask_restx import Api, Resource, fields
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import text
from sqlalchemy_utils import database_exists, create_database
from apispec import APISpec
from apispec_webframeworks.flask import FlaskPlugin
from flask_swagger_ui import get_swaggerui_blueprint
from flask_cors import CORS
from werkzeug.security import generate_password_hash, check_password_hash
from my_project.auth.route import register_routes

SECRET_KEY = "SECRET_KEY"
SQLALCHEMY_DATABASE_URI = "SQLALCHEMY_DATABASE_URI"
MYSQL_ROOT_USER = "MYSQL_ROOT_USER"
MYSQL_ROOT_PASSWORD = "MYSQL_ROOT_PASSWORD"

# Database
db = SQLAlchemy()

todos = {}



def init_autodoc_swagger(app: Flask) -> None:
    app.config.setdefault("SWAGGER", {
        "uiversion": 3,
        "title": "Pets Shop API",
        "openapi": "3.0.3",
    })

    swagger_template = {
        "openapi": "3.0.3",
        "info": {
            "title": "Pets Shop API",
            "version": "1.0.0",
            "description": "Autogenerated Swagger docs",
            "contact": {"name": "Arsen Pavliuk", "email": "test@gmail.com"},
            "license": {"name": "MIT"},
        },
        "servers": [
            {"url": "/"}
        ],
        "components": {
            "securitySchemes": {
                "bearerAuth": {
                    "type": "http",
                    "scheme": "bearer",
                    "bearerFormat": "JWT"
                }
            }
        },
        "security": [{"bearerAuth": []}],
    }

    Swagger(app, template=swagger_template)

def create_app(app_config: Dict[str, Any], additional_config: Dict[str, Any]) -> Flask:
    """
    Creates Flask application
    :param app_config: Flask configuration
    :param additional_config: additional configuration
    :return: Flask application object
    """
    _process_input_config(app_config, additional_config)
    app = Flask(__name__)
    app.config["SECRET_KEY"] = secrets.token_hex(16)
    app.config = {**app.config, **app_config}
    
    CORS(app)
    _init_db(app)
    register_routes(app)
    _init_swagger(app)
    
    return app


def _do_cursor_task(app:Flask):
    with open("cursor.sql", "r") as file:
        sql_script = file.read()
    with app.app_context() as connection:
        db.session.execute(text(sql_script))
        print("SQL script executed successfully.")


def _init_positions(app: Flask):
    with app.app_context():
        db.session.execute(
            """
            DROP PROCEDURE IF EXISTS insert_positions;
            CREATE PROCEDURE insert_positions()
            BEGIN
                DECLARE i INT DEFAULT 20;
            
                WHILE i < 30 DO
                    INSERT IGNORE INTO position (id, title)
                    VALUES (i, CONCAT('Noname', i));
                    SET i = i + 1;
                END WHILE;
            END;
            """
        )

        db.session.execute("CALL insert_positions();")
        db.session.commit()


def _init_employee_award(app: Flask, current_group_id: int,current_employee_id: int) -> None:
    with app.app_context():
        db.session.execute("CALL AddEmployeeGroup(:current_group_id, :current_employee_id)", {
            'current_group_id': current_group_id,
            'current_employee_id': current_employee_id
        })
        db.session.commit()


def _init_procedures(app: Flask) -> None:
    with app.app_context():
        db.session.execute('''
            DROP PROCEDURE IF EXISTS AddEmployeeGroup;
                CREATE PROCEDURE AddEmployeeGroup(
                IN p_current_group_id INT,
                IN p_current_employee_id INT
            )
            BEGIN
                INSERT IGNORE  INTO employee_groups (current_group_id, current_employee_id)
                VALUES (p_current_group_id, p_current_employee_id);
            END;
          ''')
        db.session.commit()

def _init_function(app: Flask) -> None:
    with app.app_context():
        db.session.execute('''
        DROP FUNCTION IF EXISTS YoungestChild;
        CREATE FUNCTION YoungestChild() 
        RETURNS DATE
        DETERMINISTIC
        BEGIN
            DECLARE youngest_date DATE;
            SELECT MIN(admission_date) INTO youngest_date 
            FROM test.child_history;
            RETURN youngest_date;
        END;
        ''')
        db.session.execute('''
           DROP PROCEDURE IF EXISTS ExecSelect;
            CREATE PROCEDURE ExecSelect()
            BEGIN
                SELECT YoungestChild() AS AdmissionDate;
            END;
        ''')

        db.session.commit()
        result = db.session.execute('CALL ExecSelect() ').scalar()
        print(f"The youngest child has {result} admision date")


def _init_trigger(app: Flask) -> None:
    with app.app_context():
        #  as fk constraint
        db.session.execute('''
        DROP TRIGGER IF EXISTS trigger_gender_id;
        CREATE TRIGGER trigger_gender_id
        BEFORE INSERT ON employee
        FOR EACH ROW
        BEGIN
            IF NEW.Id < 0 THEN
                SIGNAL SQLSTATE '45000'
                SET MESSAGE_TEXT = 'Primary key cannot be negative';
            END IF;
            IF NOT EXISTS (SELECT 1 FROM gender WHERE gender.Id = NEW.gender_id) THEN
                SIGNAL SQLSTATE '45000'
                SET MESSAGE_TEXT = 'No such gender exist';
            END IF;
        END;
        ''')
        #update
        db.session.execute('''
               DROP TRIGGER IF EXISTS trigger_gender_id_up;
               CREATE TRIGGER trigger_gender_id_up
               BEFORE UPDATE ON employee
               FOR EACH ROW
               BEGIN
                   IF NEW.Id < 0 THEN
                       SIGNAL SQLSTATE '45000'
                       SET MESSAGE_TEXT = 'Primary key cannot be negative';
                   END IF;
                   IF NOT EXISTS (SELECT 1 FROM gender WHERE gender.Id = NEW.gender_id) THEN
                       SIGNAL SQLSTATE '45000'
                       SET MESSAGE_TEXT = 'No such gender exist';
                   END IF;
               END;
               ''')
        #  double zero limiter
        db.session.execute('''
               DROP TRIGGER IF EXISTS double_zerro_trigger;
               CREATE TRIGGER double_zerro_trigger
               BEFORE INSERT ON gender 
               FOR EACH ROW
               BEGIN
                   IF RIGHT(NEW.Id,2) = '00' THEN
                       SIGNAL SQLSTATE '45000'
                       SET MESSAGE_TEXT = 'Identifier cannot have double zero due to the rule of universe';
                   END IF;
               END;
               ''')
        # update
        db.session.execute('''
               DROP TRIGGER IF EXISTS double_zerro_trigger_upd;
               CREATE TRIGGER double_zerro_trigger_upd
               BEFORE UPDATE ON gender 
               FOR EACH ROW
               BEGIN
                   IF RIGHT(NEW.Id,2) = '00' THEN
                       SIGNAL SQLSTATE '45000'
                       SET MESSAGE_TEXT = 'Identifier cannot have double zero due to the rule of universe';
                   END IF;
               END;
               ''')

        # max 6 chars and min 3  create
        db.session.execute('''
                        DROP TRIGGER IF EXISTS award_limiter;
                        CREATE TRIGGER award_limiter
                        BEFORE INSERT ON award
                        FOR EACH ROW
                        BEGIN
                            IF CHAR_LENGTH(NEW.description) <= 3 OR CHAR_LENGTH(NEW.description) > 6 THEN 
                                SIGNAL SQLSTATE '45000'
                                SET MESSAGE_TEXT = 'Tanos said that award description must be at least 6 characters.';
                            END IF;
                        END;

                       ''')
        # update
        db.session.execute('''
                        DROP TRIGGER IF EXISTS award_limiter_upd;
                        CREATE TRIGGER award_limiter_upd
                        BEFORE UPDATE ON award
                        FOR EACH ROW
                        BEGIN
                            IF CHAR_LENGTH(NEW.description) <= 3 OR CHAR_LENGTH(NEW.description) > 6 THEN 
                                SIGNAL SQLSTATE '45000'
                                SET MESSAGE_TEXT = 'Tanos said that award description must be at least 6 characters.';
                            END IF;
                        END;

                       ''')


        # forbid delete
        db.session.execute('''
                              DROP TRIGGER IF EXISTS on_kindergarten_remove;
                              CREATE TRIGGER on_kindergarten_remove
                              BEFORE DELETE ON kindergarten 
                              FOR EACH ROW
                              BEGIN                              
                                  SIGNAL SQLSTATE '45000'
                                  SET MESSAGE_TEXT = 'Removing kindergarden is not the jedi way';
                              END;
                              ''')

        db.session.commit()



def _init_swagger(app: Flask) -> None:
    authorizations = {
        'Bearer': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization',
            'description': 'JWT Token. Format: Bearer <token>'
        }
    }
    
    api = Api(
        app, 
        title='Pizza Delivery Management API',
        description='Complete REST API for pizza delivery management system with authentication',
        version='2.0',
        doc='/api/docs/',
        prefix='/api/v1',
        authorizations=authorizations,
        security='Bearer'
    )
    
    user_model = api.model('User', {
        'id': fields.Integer(description='User ID'),
        'username': fields.String(required=True, description='Username'),
        'email': fields.String(required=True, description='Email'),
        'phone': fields.String(description='Phone number'),
        'address': fields.String(description='Delivery address')
    })
    
    pizza_model = api.model('Pizza', {
        'id': fields.Integer(description='Pizza ID'),
        'name': fields.String(required=True, description='Pizza name'),
        'description': fields.String(description='Pizza description'),
        'price': fields.Float(required=True, description='Price'),
        'size': fields.String(description='Size (Small/Medium/Large)'),
        'ingredients': fields.List(fields.String, description='Ingredients')
    })
    
    order_model = api.model('Order', {
        'id': fields.Integer(description='Order ID'),
        'user_id': fields.Integer(required=True, description='User ID'),
        'pizzas': fields.List(fields.Nested(pizza_model), description='Pizza list'),
        'total_price': fields.Float(description='Total price'),
        'status': fields.String(description='Order status'),
        'delivery_address': fields.String(description='Delivery address'),
        'created_at': fields.DateTime(description='Creation time')
    })
    
    login_model = api.model('Login', {
        'username': fields.String(required=True, description='Username'),
        'password': fields.String(required=True, description='Password')
    })
    
    register_model = api.model('Register', {
        'username': fields.String(required=True, description='Username'),
        'password': fields.String(required=True, description='Password'),
        'email': fields.String(required=True, description='Email'),
        'phone': fields.String(description='Phone number'),
        'address': fields.String(description='Delivery address')
    })
    
    order_create_model = api.model('OrderCreate', {
        'pizza_ids': fields.List(fields.Integer, required=True, description='List of pizza IDs'),
        'address': fields.String(description='Delivery address (optional)')
    })
    
    # API Response models
    token_response_model = api.model('TokenResponse', {
        'token': fields.String(description='JWT Access Token'),
        'user': fields.Nested(api.model('UserInfo', {
            'id': fields.Integer(description='User ID'),
            'username': fields.String(description='Username'),
            'email': fields.String(description='Email')
        })),
        'message': fields.String(description='Success message')
    })
    
    message_response_model = api.model('MessageResponse', {
        'message': fields.String(description='Response message')
    })
    
    stats_model = api.model('OrderStats', {
        'total_orders': fields.Integer(description='Total number of orders'),
        'total_revenue': fields.Float(description='Total revenue'),
        'status_distribution': fields.Raw(description='Orders by status'),
        'average_order_value': fields.Float(description='Average order value')
    })
    
    popular_pizza_model = api.model('PopularPizza', {
        'id': fields.Integer(description='Pizza ID'),
        'name': fields.String(description='Pizza name'),
        'description': fields.String(description='Pizza description'),
        'price': fields.Float(description='Price'),
        'size': fields.String(description='Size'),
        'ingredients': fields.List(fields.String, description='Ingredients'),
        'order_count': fields.Integer(description='Number of times ordered')
    })
    
    active_user_model = api.model('ActiveUser', {
        'username': fields.String(description='Username'),
        'email': fields.String(description='Email'),
        'order_count': fields.Integer(description='Number of orders'),
        'total_spent': fields.Float(description='Total amount spent')
    })
    
    health_model = api.model('HealthStatus', {
        'status': fields.String(description='System status'),
        'message': fields.String(description='Status message'),
        'version': fields.String(description='API version'),
        'database': fields.String(description='Database status'),
        'users_count': fields.Integer(description='Number of users'),
        'pizzas_count': fields.Integer(description='Number of pizzas'),
        'orders_count': fields.Integer(description='Number of orders'),
        'timestamp': fields.String(description='Current timestamp')
    })
    
    order_status_model = api.model('OrderStatus', {
        'status': fields.String(required=True, description='New order status', 
                              enum=['New', 'Preparing', 'On the way', 'Delivered', 'Cancelled'])
    })
    
    def token_required(f):
        @wraps(f)
        def decorated(*args, **kwargs):
            token = request.headers.get('Authorization')
            if not token:
                api.abort(401, 'Token is missing!')
            
            try:
                if token.startswith('Bearer '):
                    token = token[7:]
                data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])
                g.current_user = data['username']
            except:
                api.abort(401, 'Invalid token!')
            
            return f(*args, **kwargs)
        return decorated
    
    users_db = {
        'admin': {
            'id': 1,
            'username': 'admin',
            'email': 'admin@pizza.com',
            'password': generate_password_hash('admin123'),
            'phone': '+380123456789',
            'address': '123 Main St'
        },
        'user': {
            'id': 2,
            'username': 'user',
            'email': 'user@gmail.com', 
            'password': generate_password_hash('user123'),
            'phone': '+380987654321',
            'address': '456 Oak Ave'
        }
    }
    
    pizzas_db = {
        1: {'id': 1, 'name': 'Margherita', 'description': 'Classic pizza with tomatoes and mozzarella', 'price': 299.0, 'size': 'Medium', 'ingredients': ['tomatoes', 'mozzarella', 'basil']},
        2: {'id': 2, 'name': 'Pepperoni', 'description': 'Pizza with pepperoni and cheese', 'price': 349.0, 'size': 'Large', 'ingredients': ['pepperoni', 'mozzarella', 'tomato sauce']},
        3: {'id': 3, 'name': 'Vegetarian', 'description': 'Pizza with vegetables', 'price': 319.0, 'size': 'Medium', 'ingredients': ['bell peppers', 'mushrooms', 'onions', 'tomatoes']}
    }
    
    orders_db = {}
    order_counter = 1
    
    ns_auth = api.namespace('auth', description='Authentication and authorization')
    ns_users = api.namespace('users', description='User management')
    ns_pizzas = api.namespace('pizzas', description='Pizza catalog')
    ns_orders = api.namespace('orders', description='Order management')
    ns_health = api.namespace('health', description='System monitoring')
    
    @ns_auth.route('/register')
    class Register(Resource):
        @api.expect(register_model)
        @api.marshal_with(message_response_model)
        def post(self):
            """Register new user"""
            data = request.get_json()
            username = data.get('username')
            
            if not username or not data.get('password') or not data.get('email'):
                api.abort(400, 'Username, password and email are required')
            
            if username in users_db:
                api.abort(400, f'User {username} already exists')
            
            users_db[username] = {
                'id': len(users_db) + 1,
                'username': username,
                'email': data.get('email'),
                'password': generate_password_hash(data.get('password')),
                'phone': data.get('phone', ''),
                'address': data.get('address', '')
            }
            
            return {'message': f'User {username} registered successfully!'}, 201
    
    @ns_auth.route('/login')
    class Login(Resource):
        @api.expect(login_model)
        @api.marshal_with(token_response_model)
        def post(self):
            """Login and get JWT token"""
            data = request.get_json()
            username = data.get('username')
            password = data.get('password')
            
            user = users_db.get(username)
            if not user or not check_password_hash(user['password'], password):
                api.abort(401, 'Invalid credentials')
            
            token = jwt.encode({
                'username': username,
                'exp': datetime.utcnow() + timedelta(hours=24)
            }, app.config['SECRET_KEY'], algorithm='HS256')
            
            return {
                'token': token,
                'user': {
                    'id': user['id'],
                    'username': user['username'],
                    'email': user['email']
                },
                'message': 'Login successful!'
            }
    
    @ns_users.route('/profile')
    class UserProfile(Resource):
        @api.doc(security='Bearer')
        @token_required
        @api.marshal_with(user_model)
        def get(self):
            """Get current user profile"""
            user = users_db.get(g.current_user)
            if not user:
                api.abort(404, 'User not found')
            return user
    
    @ns_users.route('/')
    class UsersList(Resource):
        @api.doc(security='Bearer')
        @token_required
        @api.marshal_list_with(user_model)
        def get(self):
            """Get all users (admin only)"""
            if g.current_user != 'admin':
                api.abort(403, 'Access denied')
            return list(users_db.values())
    
    @ns_pizzas.route('/')
    class PizzasList(Resource):
        @api.marshal_list_with(pizza_model)
        def get(self):
            """Get pizza catalog"""
            return list(pizzas_db.values())
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(pizza_model)
        @api.marshal_with(pizza_model)
        def post(self):
            """Add new pizza (admin only)"""
            if g.current_user != 'admin':
                api.abort(403, 'Only administrators can add pizzas')
            
            data = request.get_json()
            pizza_id = max(pizzas_db.keys()) + 1 if pizzas_db else 1
            pizza = {
                'id': pizza_id,
                'name': data.get('name'),
                'description': data.get('description'),
                'price': data.get('price'),
                'size': data.get('size', 'Medium'),
                'ingredients': data.get('ingredients', [])
            }
            pizzas_db[pizza_id] = pizza
            return pizza, 201
    
    @ns_pizzas.route('/<int:pizza_id>')
    class Pizza(Resource):
        @api.marshal_with(pizza_model)
        def get(self, pizza_id):
            """Get pizza by ID"""
            pizza = pizzas_db.get(pizza_id)
            if not pizza:
                api.abort(404, 'Pizza not found')
            return pizza
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(pizza_model)
        @api.marshal_with(pizza_model)
        def put(self, pizza_id):
            """Update pizza by ID (admin only)"""
            if g.current_user != 'admin':
                api.abort(403, 'Only administrators can update pizzas')
            
            pizza = pizzas_db.get(pizza_id)
            if not pizza:
                api.abort(404, 'Pizza not found')
            
            data = request.get_json()
            pizza.update({
                'name': data.get('name', pizza['name']),
                'description': data.get('description', pizza['description']),
                'price': data.get('price', pizza['price']),
                'size': data.get('size', pizza['size']),
                'ingredients': data.get('ingredients', pizza['ingredients'])
            })
            
            return pizza
        
        @api.doc(security='Bearer')
        @api.marshal_with(message_response_model)
        @token_required
        def delete(self, pizza_id):
            """Delete pizza by ID (admin only)"""
            if g.current_user != 'admin':
                api.abort(403, 'Only administrators can delete pizzas')
            
            if pizza_id not in pizzas_db:
                api.abort(404, 'Pizza not found')
            
            del pizzas_db[pizza_id]
            return {'message': f'Pizza with ID {pizza_id} deleted successfully'}
    
    @ns_orders.route('/')
    class OrdersList(Resource):
        @api.doc(security='Bearer')
        @token_required
        @api.marshal_list_with(order_model)
        def get(self):
            """Get user orders"""
            user_orders = [order for order in orders_db.values() 
                          if order.get('username') == g.current_user]
            return user_orders
        
        @api.doc(security='Bearer')
        @api.expect(order_create_model)
        @api.marshal_with(order_model)
        @token_required
        def post(self):
            """Create new order"""
            nonlocal order_counter
            data = request.get_json()
            pizza_ids = data.get('pizza_ids', [])
            
            if not pizza_ids:
                api.abort(400, 'Order must contain at least one pizza')
            
            ordered_pizzas = []
            total_price = 0
            
            for pid in pizza_ids:
                pizza = pizzas_db.get(pid)
                if pizza:
                    ordered_pizzas.append(pizza)
                    total_price += pizza['price']
            
            if not ordered_pizzas:
                api.abort(400, 'No valid pizzas found')
            
            order = {
                'id': order_counter,
                'username': g.current_user,
                'user_id': users_db[g.current_user]['id'],
                'pizzas': ordered_pizzas,
                'total_price': total_price,
                'status': 'New',
                'delivery_address': data.get('address', users_db[g.current_user]['address']),
                'created_at': datetime.utcnow().isoformat()
            }
            
            orders_db[order_counter] = order
            order_counter += 1
            
            return order, 201
    
    @ns_orders.route('/<int:order_id>')
    class Order(Resource):
        @api.doc(security='Bearer')
        @token_required
        @api.marshal_with(order_model)
        def get(self, order_id):
            """Get order by ID"""
            order = orders_db.get(order_id)
            if not order:
                api.abort(404, 'Order not found')
            
            if order['username'] != g.current_user and g.current_user != 'admin':
                api.abort(403, 'Access denied')
            
            return order
        
        @api.doc(security='Bearer')
        @api.expect(order_status_model)
        @api.marshal_with(order_model)
        @token_required
        def put(self, order_id):
            """Update order status (admin only)"""
            if g.current_user != 'admin':
                api.abort(403, 'Only administrators can update order status')
            
            order = orders_db.get(order_id)
            if not order:
                api.abort(404, 'Order not found')
            
            data = request.get_json()
            new_status = data.get('status')
            
            if new_status:
                order['status'] = new_status
                return order
            
            api.abort(400, 'Status is required')
        
        @api.doc(security='Bearer')
        @api.marshal_with(message_response_model)
        @token_required
        def delete(self, order_id):
            """Cancel order"""
            order = orders_db.get(order_id)
            if not order:
                api.abort(404, 'Order not found')
            
            if order['username'] != g.current_user and g.current_user != 'admin':
                api.abort(403, 'You can only cancel your own orders')
            
            if order['status'] in ['Preparing', 'On the way', 'Delivered']:
                api.abort(400, 'Cannot cancel order with current status')
            
            del orders_db[order_id]
            return {'message': f'Order {order_id} cancelled'}
    
    @ns_orders.route('/all')
    class AllOrders(Resource):
        @api.doc(security='Bearer')
        @token_required
        @api.marshal_list_with(order_model)
        def get(self):
            """Get all orders (admin only)"""
            if g.current_user != 'admin':
                api.abort(403, 'Access denied')
            return list(orders_db.values())
    
    @ns_orders.route('/stats')
    class OrderStats(Resource):
        @api.doc(security='Bearer')
        @api.marshal_with(stats_model)
        @token_required
        def get(self):
            """Order statistics (admin only)"""
            if g.current_user != 'admin':
                api.abort(403, 'Access denied')
            
            total_orders = len(orders_db)
            total_revenue = sum(order.get('total_price', 0) for order in orders_db.values())
            
            status_counts = {}
            for order in orders_db.values():
                status = order.get('status', 'Unknown')
                status_counts[status] = status_counts.get(status, 0) + 1
            
            return {
                'total_orders': total_orders,
                'total_revenue': total_revenue,
                'status_distribution': status_counts,
                'average_order_value': total_revenue / total_orders if total_orders > 0 else 0
            }
    
    @ns_pizzas.route('/popular')
    class PopularPizzas(Resource):
        @api.marshal_list_with(popular_pizza_model)
        def get(self):
            """Get top popular pizzas"""
            pizza_counts = {}
            
            for order in orders_db.values():
                for pizza in order.get('pizzas', []):
                    pizza_id = pizza.get('id')
                    if pizza_id:
                        pizza_counts[pizza_id] = pizza_counts.get(pizza_id, 0) + 1
            
            popular_pizzas = []
            for pizza_id, count in sorted(pizza_counts.items(), key=lambda x: x[1], reverse=True)[:5]:
                pizza = pizzas_db.get(pizza_id)
                if pizza:
                    popular_pizzas.append({
                        **pizza,
                        'order_count': count
                    })
            
            return popular_pizzas
    
    @ns_pizzas.route('/by-price')
    class PizzasByPrice(Resource):
        @api.marshal_list_with(pizza_model)
        def get(self):
            """Pizzas sorted by price"""
            sorted_pizzas = sorted(pizzas_db.values(), key=lambda x: x.get('price', 0))
            return sorted_pizzas
    
    @ns_users.route('/active')
    class ActiveUsers(Resource):
        @api.doc(security='Bearer')
        @api.marshal_list_with(active_user_model)
        @token_required
        def get(self):
            """Get active users (admin only)"""
            if g.current_user != 'admin':
                api.abort(403, 'Access denied')
            
            user_order_counts = {}
            for order in orders_db.values():
                username = order.get('username')
                if username:
                    user_order_counts[username] = user_order_counts.get(username, 0) + 1
            
            active_users = []
            for username, order_count in user_order_counts.items():
                user = users_db.get(username)
                if user:
                    active_users.append({
                        'username': username,
                        'email': user.get('email'),
                        'order_count': order_count,
                        'total_spent': sum(order.get('total_price', 0) 
                                         for order in orders_db.values() 
                                         if order.get('username') == username)
                    })
            
            return sorted(active_users, key=lambda x: x['order_count'], reverse=True)
    
    @ns_orders.route('/recent')
    class RecentOrders(Resource):
        @api.doc(security='Bearer')
        @token_required
        def get(self):
            """Recent orders (admin only)"""
            if g.current_user != 'admin':
                api.abort(403, 'Access denied')
            
            recent_orders = sorted(
                orders_db.values(),
                key=lambda x: x.get('created_at', ''),
                reverse=True
            )[:10]
            
            return recent_orders
    
    @ns_orders.route('/statuses')
    class OrderStatuses(Resource):
        def get(self):
            """Get available order statuses"""
            return {
                'statuses': ['New', 'Preparing', 'On the way', 'Delivered', 'Cancelled'],
                'descriptions': {
                    'New': 'Order has been placed and is waiting to be processed',
                    'Preparing': 'Order is being prepared in the kitchen',
                    'On the way': 'Order is out for delivery',
                    'Delivered': 'Order has been successfully delivered',
                    'Cancelled': 'Order has been cancelled'
                }
            }
    
    @ns_health.route('/status')
    class HealthCheck(Resource):
        @api.marshal_with(health_model)
        def get(self):
            """System health check"""
            return {
                'status': 'healthy',
                'message': 'Pizza Delivery API is running!',
                'version': '2.0',
                'database': 'connected',
                'users_count': len(users_db),
                'pizzas_count': len(pizzas_db),
                'orders_count': len(orders_db),
                'timestamp': datetime.utcnow().isoformat()
            }
    
    @app.route("/")
    def hello_world():
        return jsonify({
            'message': 'Welcome to Pizza Delivery Management API!',
            'docs_url': '/api/docs/',
            'api_version': '2.0',
            'features': [
                'JWT Authentication',
                'User Management',
                'Pizza Catalog',
                'Order Management',
                'Admin Dashboard',
                'Real-time Statistics'
            ],
            'endpoints': {
                'authentication': {
                    'login': '/api/v1/auth/login',
                    'register': '/api/v1/auth/register'
                },
                'users': {
                    'profile': '/api/v1/users/profile',
                    'list_all': '/api/v1/users/',
                    'active_users': '/api/v1/users/active'
                },
                'pizzas': {
                    'catalog': '/api/v1/pizzas/',
                    'by_id': '/api/v1/pizzas/{id}',
                    'popular': '/api/v1/pizzas/popular',
                    'by_price': '/api/v1/pizzas/by-price'
                },
                'orders': {
                    'my_orders': '/api/v1/orders/',
                    'create': '/api/v1/orders/',
                    'by_id': '/api/v1/orders/{id}',
                    'all_orders': '/api/v1/orders/all',
                    'statistics': '/api/v1/orders/stats',
                    'recent': '/api/v1/orders/recent',
                    'statuses': '/api/v1/orders/statuses'
                },
                'system': {
                    'health': '/api/v1/health/status'
                }
            },
            'test_credentials': {
                'admin': {'username': 'admin', 'password': 'admin123'},
                'user': {'username': 'user', 'password': 'user123'}
            },
            'instructions': [
                '1. Visit /api/docs/ for interactive API documentation',
                '2. Login with test credentials to get JWT token',
                '3. Use "Bearer <token>" in Authorization header for protected endpoints',
                '4. Admin users have access to management features'
            ]
        })

def _init_db(app: Flask) -> None:
    """
    Initializes DB with SQLAlchemy
    :param app: Flask application object
    """
    app.config.setdefault("SQLALCHEMY_ENGINE_OPTIONS", {})



    db.init_app(app)

    if not database_exists(app.config["SQLALCHEMY_DATABASE_URI"]):
        create_database(app.config["SQLALCHEMY_DATABASE_URI"])

    import my_project.auth.domain
    with app.app_context():
        db.create_all()

def _process_input_config(app_config: Dict[str, Any], additional_config: Dict[str, Any]) -> None:
    load_dotenv()
    conn = os.getenv(SQLALCHEMY_DATABASE_URI)
    if conn:
        app_config["SQLALCHEMY_DATABASE_URI"] = conn
        return

    user = os.getenv(MYSQL_ROOT_USER, str(additional_config.get("MYSQL_ROOT_USER", "")))
    pwd  = os.getenv(MYSQL_ROOT_PASSWORD, str(additional_config.get("MYSQL_ROOT_PASSWORD", "")))

    template = app_config.get("SQLALCHEMY_DATABASE_URI", "")
    if not template:
        raise ValueError("SQLALCHEMY_DATABASE_URI is missing and no CONNECTION_STRING provided in env.")


    if "{user}" in template or "{password}" in template:
        app_config["SQLALCHEMY_DATABASE_URI"] = template.format(
            user=user,
            password=quote_plus(pwd),
        )
        return

    if "{}" in template:
        app_config["SQLALCHEMY_DATABASE_URI"] = template.format(
            user, quote_plus(pwd)
        )
        return

    app_config["SQLALCHEMY_DATABASE_URI"] = template